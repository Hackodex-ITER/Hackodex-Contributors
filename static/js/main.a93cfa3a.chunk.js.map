{"version":3,"sources":["components/Card/card.component.jsx","components/card-list/card-list.component.jsx","components/SearchBox/SearchBox.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","user","className","alt","src","avatar_url","width","height","login","contributions","CardList","users","map","key","id","SearchBox","placeholder","searchField","handleChange","type","name","onChange","App","props","e","setState","target","value","state","contribs","document","title","fetch","then","response","json","this","filteredUsers","filter","contrib","toLowerCase","includes","style","color","length","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yVAkBeA,G,MAfF,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACf,OACC,yBAAKC,UAAU,kBACd,yBACCC,IAAI,cACJC,IAAKH,EAAKI,WACVC,MAAM,MACNC,OAAO,QAER,gCAAMN,EAAKO,OACX,4CAAiB,6BAAMP,EAAKQ,kBCChBC,G,MAVE,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACnB,OACC,yBAAKT,UAAU,aACbS,EAAMC,KAAI,SAAAX,GAAI,OACV,kBAAC,EAAD,CAAMY,IAAKZ,EAAKa,GAAIb,KAAMA,UCOnBc,G,MAZG,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,YAAaC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAC9C,OACC,2BACChB,UAAU,SACViB,KAAK,SACLC,KAAMH,EACND,YAAaA,EACbK,SAAUH,MC0CEI,G,wDA9Cd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IAOPL,aAAe,SAAAM,GACd,EAAKC,SAAS,CACbR,YAAaO,EAAEE,OAAOC,SARvB,EAAKC,MAAQ,CACZC,SAAU,GACVZ,YAAa,IAJI,E,gEAcE,IAAD,OACnBa,SAASC,MAAQ,WACjBC,MAAM,yEACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAtB,GAAK,OAAI,EAAKc,SAAS,CAAEI,SAAUlB,S,+BAEjC,IAAD,EAC0ByB,KAAKR,MAA/BC,EADA,EACAA,SAAUZ,EADV,EACUA,YACZoB,EAAgBR,EAASS,QAAO,SAAAC,GAAO,OAC5CA,EAAQ/B,MAAMgC,cAAcC,SAASxB,EAAYuB,kBAElD,OACC,yBAAKtC,UAAU,OACd,qDACF,wBAAIwC,MAAO,CAACC,MAAM,SAAlB,sBAA8C,6BAAMd,EAASe,QAC3D,kBAAC,EAAD,CACC3B,YAAaA,EACbD,YAAY,eACZE,aAAckB,KAAKlB,eAEpB,kBAAC,EAAD,CAAUP,MAAO0B,IACjB,gCACA,yBAAKnC,UAAU,UAAf,kBACgB,6BAAK,uBAAG2C,KAAK,gCAAR,qB,GAtCPC,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxB,SAASyB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a93cfa3a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nconst Card = ({ user }) => {\r\n\treturn (\r\n\t\t<div className=\"card-container\">\r\n\t\t\t<img\r\n\t\t\t\talt=\"contributor\"\r\n\t\t\t\tsrc={user.avatar_url}\r\n\t\t\t\twidth='240'\r\n\t\t\t\theight='200'\r\n\t\t\t/>\r\n\t\t\t<h2>@{user.login}</h2>\r\n\t\t\t<p>Contributions:<br/>{user.contributions}</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from '../Card/card.component';\r\nimport './card-list.styles.css';\r\n\r\nconst CardList = ({ users }) => {\r\n\treturn (\r\n\t\t<div className=\"card-list\">\r\n\t\t\t{users.map(user => (\r\n        <Card key={user.id} user={user}/>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\nimport './SearchBox.css';\r\n\r\nconst SearchBox = ({ placeholder, searchField, handleChange }) => {\r\n\treturn (\r\n\t\t<input\r\n\t\t\tclassName=\"search\"\r\n\t\t\ttype=\"search\"\r\n\t\t\tname={searchField}\r\n\t\t\tplaceholder={placeholder}\r\n\t\t\tonChange={handleChange}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from 'react';\r\nimport CardList from './components/card-list/card-list.component';\r\nimport SearchBox from './components/SearchBox/SearchBox.component';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tcontribs: [],\r\n\t\t\tsearchField: ''\r\n\t\t};\r\n\t}\r\n\r\n\thandleChange = e => {\r\n\t\tthis.setState({\r\n\t\t\tsearchField: e.target.value\r\n\t\t});\r\n\t};\r\n\r\n\tcomponentDidMount() {\r\n\t\tdocument.title = 'Hackodex'\r\n\t\tfetch('https://api.github.com/repos/Hackodex-ITER/CSES-Problems/contributors')\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(users => this.setState({ contribs: users }));\r\n\t}\r\n\trender() {\r\n\t\tconst { contribs, searchField } = this.state;\r\n\t\tconst filteredUsers = contribs.filter(contrib =>\r\n\t\t\tcontrib.login.toLowerCase().includes(searchField.toLowerCase())\r\n\t\t);\r\n\t\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<h1>Hackodex Contributors</h1>\r\n\t\t<h2 style={{color:\"#fff\"}}>Total Contributors:<br/>{contribs.length}</h2>\r\n\t\t\t\t<SearchBox\r\n\t\t\t\t\tsearchField={searchField}\r\n\t\t\t\t\tplaceholder=\"Search users\"\r\n\t\t\t\t\thandleChange={this.handleChange}\r\n\t\t\t\t/>\r\n\t\t\t\t<CardList users={filteredUsers} />\r\n\t\t\t\t<footer>\r\n\t\t\t\t<div className=\"footer\">\r\n\t\t\t\t\tMade with :) by<br/><a href=\"https://github.com/pritam047\">Pritam Kar</a>\r\n\t\t\t\t</div>\r\n\t\t\t</footer>\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}